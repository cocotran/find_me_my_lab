// GLOBAL VARIABLE
// software names will be generated by scraper when page loads
const softwareList = [];
// list of chosen software
let chosenSoftware = [];
// variable to determine if new set of software is requested
let chosenSoftwareCached = [];

async function fetchSoftwareName() {
  fetch("http://127.0.0.1:5000/fetchSoftwareName")
    .then((response) => response.json())
    // .then(data => console.log(data.result))
    .then((data) => setSoftwareArray(data.result))
    .then(() => generateFullSoftwareList())
    .catch((err) => alert(err));
}

async function setSoftwareArray(arr) {
  for (i = 0; i < arr.length; i++) {
    softwareList.push(arr[i]);
  }
  return true;
}

// autocomplete function for search bar
// Parameters: the text field element and an array of possible autocompleted values
function autocomplete(inp, arr) {
  let currentFocus;

  // execute a function when someone writes in the text field
  inp.addEventListener("input", function (e) {
    let a,
      b,
      i,
      val = this.value;

    // close any already open lists of autocompleted values
    closeAllLists();

    // if input field is empty
    if (!val) {
      return false;
    }
    currentFocus = -1;

    // create a DIV element that will contain the items (values)
    a = document.createElement("DIV");
    a.setAttribute("id", this.id + "autocomplete-list");
    a.setAttribute("class", "autocomplete-items");

    // append the DIV element as a child of the autocomplete container
    this.parentNode.appendChild(a);

    // for each item in the array...
    for (let i = 0; i < arr.length; i++) {
      // check if the item starts with the same letters as the text field value
      if (arr[i].substr(0, val.length).toUpperCase() == val.toUpperCase()) {
        // create a DIV element for each matching element
        b = document.createElement("DIV");
        // make the matching letters bold
        b.innerHTML = "<strong>" + arr[i].substr(0, val.length) + "</strong>";
        b.innerHTML += arr[i].substr(val.length);
        // insert a input field that will hold the current array item's value
        b.innerHTML += "<input type='hidden' value='" + arr[i] + "'>";
        // execute a function when someone clicks on the item value (DIV element)
        b.addEventListener("click", function (e) {
          // insert the value for the autocomplete text field
          inp.value = this.getElementsByTagName("input")[0].value;
          // close the list of autocompleted values, (or any other open lists of autocompleted values
          closeAllLists();
        });
        a.appendChild(b);
      }
    }
  });
  // execute a function presses a key on the keyboard
  inp.addEventListener("keydown", function (e) {
    let x = document.getElementById(this.id + "autocomplete-list");
    if (x) x = x.getElementsByTagName("div");
    if (e.keyCode == 40) {
      // If the arrow DOWN key is pressed, increase the currentFocus variable
      currentFocus++;
      // and and make the current item more visible
      addActive(x);
    } else if (e.keyCode == 38) {
      // If the arrow UP key is pressed, decrease the currentFocus variable
      currentFocus--;
      // and and make the current item more visible
      addActive(x);
    } else if (e.keyCode == 13) {
      // If the ENTER key is pressed, prevent the form from being submitted
      e.preventDefault();
      if (currentFocus > -1) {
        // and simulate a click on the "active" item
        if (x) x[currentFocus].click();
      }
    } else if (e.keyCode == 27) {
      closeAllLists();
    }
  });

  function addActive(x) {
    // a function to classify an item as "active"
    if (!x) {
      return false;
    }
    // start by removing the "active" class on all items
    removeActive(x);
    if (currentFocus >= x.length) currentFocus = 0;
    if (currentFocus < 0) currentFocus = x.length - 1;
    // add class "autocomplete-active"
    x[currentFocus].classList.add("autocomplete-active");
  }

  function removeActive(x) {
    // a function to remove the "active" class from all autocomplete items
    for (let i = 0; i < x.length; i++) {
      x[i].classList.remove("autocomplete-active");
    }
  }

  function closeAllLists(elmnt) {
    // close all autocomplete lists in the document, except the one passed as an argument
    let x = document.getElementsByClassName("autocomplete-items");
    for (var i = 0; i < x.length; i++) {
      if (elmnt != x[i] && elmnt != inp) {
        x[i].parentNode.removeChild(x[i]);
      }
    }
  }

  // execute a function when someone clicks in the document
  document.addEventListener("click", function (e) {
    closeAllLists(e.target);
  });
}

// choosing software function for search bar
function chooseSoftware(inp, container) {
  inp.addEventListener("keydown", function (e) {
    if (e.keyCode == 13) {
      // ENTER key
      let softwareName = inp.value;

      // check if input is empty
      if (softwareName != "" && softwareList.includes(softwareName)) {
        // add to chosen software list
        chosenSoftware.push(softwareName);

        // add software tag to required software
        addSoftwareTag(softwareName, container);

        // highlight tag in full list
        highlightSoftwareTag(softwareName);
      }
    }
  });
}

// function for full software list
function generateFullSoftwareList() {
  for (let i = 0; i < softwareList.length; i++) {
    const currentSoftware = softwareList[i];
    // create new tag
    const newTag = document.createElement("p");
    newTag.id = currentSoftware + "_list";
    newTag.innerHTML = currentSoftware;
    newTag.classList.add("software-list-tag");
    newTag.addEventListener("click", function () {
      newTag.classList.toggle("software-list-tag");
      newTag.classList.toggle("software-list-tag-selected");

      // add/remove software to/from chosen list
      if (chosenSoftware.includes(currentSoftware)) {
        chosenSoftware = chosenSoftware.filter(
          (item) => item !== currentSoftware
        );
        removeSoftwareTag(currentSoftware, softwareChosencontainer);
      } else {
        chosenSoftware.push(currentSoftware);
        addSoftwareTag(currentSoftware, softwareChosencontainer);
      }
    });

    softwareListContainer.appendChild(newTag);
  }
}

// helper function to add software tag
function addSoftwareTag(softwareName, container) {
  // create a new software name tag
  const newTagContainer = document.createElement("div");
  newTagContainer.classList.add("software-name-tag");
  newTagContainer.id = softwareName;

  const newTag = document.createElement("p");
  // TODO: match the name in the list
  newTag.innerHTML = softwareName;
  newTagContainer.appendChild(newTag);

  const deleteBtn = document.createElement("img");
  deleteBtn.src = "../static/images/delete.svg";
  deleteBtn.classList.add("deleteBtn");
  deleteBtn.addEventListener("click", function () {
    container.removeChild(newTagContainer);

    // remove software from the chosen list
    chosenSoftware = chosenSoftware.filter((item) => item !== softwareName);

    // unhighlight tag in full list
    unhighlightSoftwareTag(softwareName);
  });
  deleteBtn.addEventListener("mouseover", function () {
    deleteBtn.src = "../static/images/delete-black.svg";
  });
  deleteBtn.addEventListener("mouseleave", function () {
    deleteBtn.src = "../static/images/delete.svg";
  });
  newTagContainer.appendChild(deleteBtn);

  container.appendChild(newTagContainer);
}

// helper function to remove software tag
function removeSoftwareTag(softwareName, container) {
  const tagToRemove = document.getElementById(softwareName);
  container.removeChild(tagToRemove);
}

// display chosen software in result
function resultSoftware(arr, container) {
  // remove all tags
  container.innerHTML = "";
  for (let i = 0; i < arr.length; i++) {
    // create a new software name tag
    const newTag = document.createElement("div");
    newTag.classList.add("software-name-tag");
    newTag.innerHTML = arr[i];
    container.appendChild(newTag);
  }
}

// helper function to highlight chosen software tag in the full software list
function highlightSoftwareTag(softwareName) {
  const tagToBeHighlighted = document.getElementById(softwareName + "_list");
  tagToBeHighlighted.classList.add("software-list-tag-selected");
  tagToBeHighlighted.classList.remove("software-list-tag");
}

// helper function to unhighlight chosen software tag in the full software list
function unhighlightSoftwareTag(softwareName) {
  const tagToBeUnhighlighted = document.getElementById(softwareName + "_list");
  tagToBeUnhighlighted.classList.add("software-list-tag");
  tagToBeUnhighlighted.classList.remove("software-list-tag-selected");
}

// POST request to fetch room by software
async function getRoomBySoftware(softwareArray) {
  displayLoader(loaderContainer);
  const rooms = fetch("http://127.0.0.1:5000/room_by_software", {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({
      software_array: softwareArray,
    }),
  })
    .then((e) => e.json())
    // .then(e => console.log(e))
    .catch((err) => console.log(err));
  return rooms;
}

// post request to fetch lab host by room
async function getHostByRoom(roomNumber) {
  const hosts = fetch("http://127.0.0.1:5000/get_lab_host_by_software", {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({
      room_array: roomNumber,
    }),
  })
    .then((e) => e.json())
    // .then(e => console.log(e))
    .catch((err) => console.log("Error"));
  return hosts;
}

// function to display labs info
async function displayHost(hostObject, container) {
  for (const room in hostObject) {
    for (let i = 0; i < hostObject[room].length; i++) {
      const newHostContainer = document.createElement("div");
      newHostContainer.classList.add("host-info");

      const newHostRoom = document.createElement("div");
      newHostRoom.classList.add("w-10");
      newHostRoom.innerHTML = room;

      const newHostName = document.createElement("div");
      newHostName.classList.add("w-44");
      newHostName.classList.add("cursor-pointer");
      newHostName.innerHTML = hostObject[room][i][0];
      newHostName.addEventListener("click", function () {
        var range = document.createRange();
        range.selectNode(newHostName);
        window.getSelection().removeAllRanges(); // clear current selection
        window.getSelection().addRange(range); // to select text
        document.execCommand("copy");
        window.getSelection().removeAllRanges(); // to deselect
      });
      newHostName.addEventListener("mousedown", function () {
        newHostName.classList.toggle("hosts-info-background");
      });
      newHostName.addEventListener("mouseup", function () {
        newHostName.classList.toggle("hosts-info-background");
      });

      const newHostOS = document.createElement("div");
      newHostOS.classList.add("w-10");
      newHostOS.innerHTML = hostObject[room][i][1];

      const newHostSSH = document.createElement("div");
      newHostSSH.classList.add("w-1/2");
      newHostSSH.classList.add("cursor-pointer");
      newHostSSH.classList.add("break-all");
      newHostSSH.innerHTML =
        "ssh -L 3391:" +
        hostObject[room][i][0] +
        ":3389" +
        "<span class='italic text-red-400'>your_username</span>" +
        "@login.encs.concordia.ca";
      newHostSSH.addEventListener("click", function () {
        var range = document.createRange();
        range.selectNode(newHostSSH);
        window.getSelection().removeAllRanges(); // clear current selection
        window.getSelection().addRange(range); // to select text
        document.execCommand("copy");
        window.getSelection().removeAllRanges(); // to deselect
      });
      newHostSSH.addEventListener("mousedown", function () {
        newHostSSH.classList.toggle("hosts-info-background");
      });
      newHostSSH.addEventListener("mouseup", function () {
        newHostSSH.classList.toggle("hosts-info-background");
      });

      // adding new tags to new big container
      newHostContainer.appendChild(newHostRoom);
      newHostContainer.appendChild(newHostName);
      newHostContainer.appendChild(newHostOS);
      newHostContainer.appendChild(newHostSSH);

      // adding new container to parent container
      container.appendChild(newHostContainer);
    }
  }
  return true;
}

// helper function to copy text from a div
function copyDivToClipboard(tag) {
  var range = document.createRange();
  range.selectNode(tag);
  window.getSelection().removeAllRanges(); // clear current selection
  window.getSelection().addRange(range); // to select text
  document.execCommand("copy");
  window.getSelection().removeAllRanges(); // to deselect
}

// function to add loading screen
function displayLoader(container) {
  const newLoader = document.createElement("div");
  newLoader.id = "loader";
  newLoader.classList.add("loader");

  const description = document.createElement("p");
  description.id = "loader-description";
  description.innerHTML = "Logging in to ENCS lab info, please wait...";

  container.appendChild(newLoader);
  container.appendChild(description);
}

function removeLoader(container) {
  const loader = document.getElementById("loader");
  const description = document.getElementById("loader-description");

  container.removeChild(loader);
  container.removeChild(description);
}

// GETTING HTML ELEMENTS
const searchInput = document.getElementById("search-input");
const softwareChosencontainer = document.getElementById("software-chosen");
const resultSoftwareContainer = document.getElementById("result-software");
const searchButton = document.getElementById("search-button");
const softwareListContainer = document.getElementById("software-list");
const fullListExpand = document.getElementById("full-list-expand");
const hostsContainer = document.getElementById("hosts-container");
const loaderContainer = document.getElementById("loader-container");
const resultPanel = document.getElementById("result-panel");

// ASSIGNING FUNCTIONS
autocomplete(searchInput, softwareList);
chooseSoftware(searchInput, softwareChosencontainer);

searchButton.addEventListener("click", async function () {
  resultPanel.scrollIntoView(true, { behavior: "smooth" });
  resultSoftware(chosenSoftware, resultSoftwareContainer);
  if (
    JSON.stringify(chosenSoftware.sort()) !=
    JSON.stringify(chosenSoftwareCached)
  ) {
    const rooms = await getRoomBySoftware(chosenSoftware);
    const hosts = await getHostByRoom(rooms.result);
    displayHost(hosts, hostsContainer).then((e) =>
      removeLoader(loaderContainer)
    );
    chosenSoftwareCached = chosenSoftware.sort();
  }
});

// fetch texts on page load
window.onload = () => {
  fetchSoftwareName();
};

// expand/collapse full software list
fullListExpand.addEventListener("click", function () {
  let content = document.getElementById("list-content");
  if (content.style.display === "block") {
    content.style.display = "none";
  } else {
    content.style.display = "block";
  }
});
